/************************************************************************
 * File: csobelgradient.h                                               *
 * Project: AIPS basic filters                                          *
 * Description: Sobel operator for gradient field generation            *
 *                                                                      *
 * Author: Hendrik Belitz (h.belitz@fz-juelich.de)                      *
 *                                                                      *
 * Version: 0.4                                                         *
 * Status : Beta                                                        *
 * Created: 03.12.03                                                    *
 * Changed: 2004-01-19 Corrected filter mask                            *
 *          2004-01-24 Implemented 3D case                              *
 *          2004-01-26 Added support for AIPS progress bar              *
 *          2004-05-05 Sobel filter now uses TImage::iterator           *
 *          2004-06-21 Corrected an error which resulted in false 3D    *
 *                      operator values                                 * 
 ************************************************************************
 * This program is free software; you can redistribute it and/or modify *
 * it under the terms of the GNU General Public License as published by *
 * the Free Software Foundation; either version 2 of the License, or    *
 * (at your option) any later version.                                  *
 ************************************************************************/

#ifndef CSOBELGRADIENT_H
#define CSOBELGRADIENT_H

// AIPS includes
#include <aipsnumbertraits.h>
#include <cfilter.h>
#include <cglobalprogress.h>

// library includes
#include "libid.h"

using namespace aips;
  
/** This one generates a vector field from an image using the sobel gradient operator. */
class CSobelGradient : public CFilter
{
private:
  /// Standard constructor
  CSobelGradient();
  /// Copy constructor
  CSobelGradient( CSobelGradient& );
  /// Assignment operator
  CSobelGradient& operator=( CSobelGradient& );
public:
/* Structors */
  /// Constructor
  CSobelGradient( ulong ulID ) 
		throw();
  /// Destructor
  virtual ~CSobelGradient() 
		throw();
/* Other methods */
  /// Reimplemented from CPipelineItem  
  virtual void apply() 
		throw();
  /// Reimplemented from CPipelineItem  
  virtual CPipelineItem* newInstance( ulong ulID = 0 ) const 
		throw();  
private:
	TImage* roiPtr; ///< Region of interest
	bool bRoiSelf; ///< Is aoi generated by the filter?
	/// 2D Sobel operator
	void sobel2D() 
		throw();
	/// 3D Sobel operator
	void sobel3D()
		throw();
};

#endif
