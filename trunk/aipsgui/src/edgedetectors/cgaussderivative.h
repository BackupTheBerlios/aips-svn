/************************************************************************
 * File: cgaussderivative.h                                             *
 * Project: AIPS - Edge detectors plugin library                        *
 * Description: Edge detector using the derivative of the gaussian      *
 *                                                                      *
 * Author: Hendrik Belitz (h.belitz@fz-juelich.de)                      *
 *                                                                      *
 * Version: 0.1                                                         *
 * Status:  Alpha                                                       *
 * Created: 2004-06-23                                                  *
 * Changed: 2004-07-02 Added 3D version of filter                       *
 *                     Updated documentation                            *
 ************************************************************************
 * This program is free software; you can redistribute it and/or modify *
 * it under the terms of the GNU General Public License as published by *
 * the Free Software Foundation; either version 2 of the License, or    *
 * (at your option) any later version.                                  *
 ************************************************************************/
#ifndef CGAUSSDERIVATIVE_H
#define CGAUSSDERIVATIVE_H

// AIPS includes
#include <cfilter.h>
#include <cglobalprogress.h>
#ifdef BENCHMARK
#include <boost/timer.hpp>
#endif

// library includes
#include "libid.h"

using namespace aips;
  
/** This one generates a vector field from an image using the gauss gradient operator */
class CGaussDerivative : public CFilter
{
private:
  /// Standard constructor
  CGaussDerivative();
  /// Copy constructor
  CGaussDerivative( CGaussDerivative& );
  /// Assignment operator
  CGaussDerivative& operator=( CGaussDerivative& );
public:
/* Structors */
  /// Constructor
  CGaussDerivative( ulong ulID ) 
		throw();
  /// Destructor
  virtual ~CGaussDerivative() 
		throw();
/* Other methods */
  /// Reimplemented from CPipelineItem  
  virtual void apply() 
		throw();
  /// Reimplemented from CPipelineItem  
  virtual CPipelineItem* newInstance( ulong ulID = 0 ) const 
		throw();  
private:
	TImage* roiPtr; ///< Region of interest
	bool bRoiSelf;  ///< Is aoi generated by the filter?
	/// 2D Gauss derivative operator
	void gauss2D() 
		throw();
	/// 3D Gauss derivative operator
	void gauss3D()
		throw();
	/// Compute gaussian derivative mask
	std::vector<double> computeMask( int& iMaskSize )
		throw();
};

#endif
